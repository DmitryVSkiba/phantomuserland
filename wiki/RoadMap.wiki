#summary Phantom development plan.
#labels Featured,Phase-Requirements

= Nearest Goal =

To produce distributable alpha-level OS which can be programmed for by 3rd party programmers. *We're quite close to this.*


== Userland/Tools Tasks ==

Quite crirtical tasks.

  * *Java bytecode compiler*. Have skeleton, need complete one. *Really urgent.*
  * *Hosted test env. multithreading*. Must be easy.
  * *Hosted test env. TCP access*. Ditto.
  * Windowing env Z-buffer - *Done*. 
  * Windowing events, input, event thread pools - *In progress, need userland iface*. 
  * *VM and compiler support for floats/doubles/64 bit ints*. 
  * *More of Phantom language implementation in compiler*. Closures, direct containers support.

Not critical, but can be done relatively easily.

  * *VmWeakRef* *In progress*
  * *Border objects and restart exceptions*. Especially for TCP interfaces. *Nearly done*

Not so easy, but we need it, sooner or later.

  * *Python compiler*. Seems to be a good possible object env shell and common scripting language. Or shall it be Ruby instead?

== Kernel Tasks ==

  * *VirtIO drivers*. Have incomplete disk driver, net driver in progress.
  * *IDE driver cleanup*. Existing driver is very strange. *started*
  * *Partition lookup code*. Partially implemented. *need tests*
  * *IP stack tests and userland interface*. 
  * *ARM port*. Started, have most of arch dependent parts separated from main code.

Not critical, but can be done relatively easily.

  * *Disk selection*. Right now Phantom looks for its disk in hardcoded places. Partitioning system reckognizes Phantom partitions and disks. Has to be connected to pager.


= General Project Support Tasks =

  * *Doxygen*. And code documentation too.
  * *Test suite*, regular regression test setup. *mostly ok*
  * *Code review*. Need code review process to be set up and carried.
  * *Good internal document(s) on development process*. For new members to jump in easily.
  * *Define branching/merging rules*. We will have to have release branches.


= Far Goals =

  * *Graphical shell*. Something to start with.
  * *Posix support*. Map two binary objects to DS/CS, run native thread, support syscall mapping. *In progress*
  * *LLVM fast code*. In addition to posix subsystem it would be nice to have a specific LLVM subsystem which can offer programmers hispeed, but portable (to Phantom on other arch) programming framework. The same CS/DS binary objects, but executable code is LLVM-level and passed through LLVM backend before being run for the first time.
  * *OpenGL*. In fact, it is quite easy to get TinyGL working (it is already done for kernel), but we need a clean userland interface and understanding of interoperation for multiiple simult. threads doing GL rendering in a same env.
  * *Sound drivers*. At least some very simple AC97 wave output one? *in progress*
  * *Video codecs environment*. Seems to be requiring Posix/LLVM support first. The first goal is to be able to give it an MPEG binary for playing. *Quite near now*